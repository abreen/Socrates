package io.breen.socrates.view.setup;

import io.breen.socrates.criteria.Criteria;

import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.nio.file.Path;
import java.util.LinkedList;
import java.util.List;

public class SetupView extends JFrame {

    private JPanel rootPanel;

    private JButton openButton;
    private JButton selectButton;
    private JButton quitButton;

    private JPanel openCriteriaPanel;
    private JPanel selectSubmissionsPanel;

    public SetupView() {
        super("Socrates");

        this.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        this.setResizable(false);
        this.setContentPane(rootPanel);

        JRootPane root = this.getRootPane();
        root.setDefaultButton(openButton);

        this.setSize(new Dimension(500, 400));
        this.setLocationRelativeTo(null);

        quitButton.addActionListener(
                new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        SetupView.this.dispatchEvent(
                                new WindowEvent(SetupView.this, WindowEvent.WINDOW_CLOSING)
                        );
                    }
                }
        );
    }

    private static void disableCancelButton(Container container) {
        for (int i = 0; i < container.getComponentCount(); i++) {
            Component c = container.getComponent(i);
            if (c instanceof JButton) {
                JButton b = (JButton) c;
                if (b.getText().equals("Cancel")) {
                    b.setEnabled(false);
                    return;
                }
            } else if (c instanceof Container) {
                disableCancelButton((Container) c);
            }
        }
    }

    private static String[] concat(String[] a, String[] b) {
        String[] newArray = new String[a.length + b.length];
        System.arraycopy(a, 0, newArray, 0, a.length);
        System.arraycopy(b, 0, newArray, a.length, b.length);
        return newArray;
    }

    public Path chooseCriteriaFile() {
        JFileChooser fc = new JFileChooser();

        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fc.setMultiSelectionEnabled(false);
        fc.setAcceptAllFileFilterUsed(false);

        String[] any = concat(
                Criteria.CRITERIA_FILE_EXTENSIONS, Criteria.CRITERIA_PACKAGE_EXTENSIONS
        );
        fc.addChoosableFileFilter(new FileNameExtensionFilter("Any criteria type", any));

        fc.addChoosableFileFilter(
                new FileNameExtensionFilter(
                        "Criteria files", Criteria.CRITERIA_FILE_EXTENSIONS
                )
        );
        fc.addChoosableFileFilter(
                new FileNameExtensionFilter(
                        "Criteria packages", Criteria.CRITERIA_PACKAGE_EXTENSIONS
                )
        );

        int rv = fc.showOpenDialog(this);

        if (rv == JFileChooser.APPROVE_OPTION) {
            return fc.getSelectedFile().toPath();
        } else {
            return null;
        }
    }

    public List<Path> chooseSubmissions() {
        JFileChooser fc = new JFileChooser();

        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fc.setMultiSelectionEnabled(true);

        int rv = fc.showOpenDialog(this);

        if (rv == JFileChooser.APPROVE_OPTION) {
            List<Path> paths = new LinkedList<>();
            for (File f : fc.getSelectedFiles())
                paths.add(f.toPath());
            return paths;
        } else {
            return null;
        }
    }

    public void showCriteriaCard() {
        CardLayout cardLayout = (CardLayout) rootPanel.getLayout();
        cardLayout.show(rootPanel, "CriteriaCard");
    }

    public void showSubmissionsCard() {
        CardLayout cardLayout = (CardLayout) rootPanel.getLayout();
        cardLayout.show(rootPanel, "SubmissionsCard");
    }

    public void addOpenCriteriaButtonActionListener(ActionListener l) {
        openButton.addActionListener(l);
    }

    public void addSubmissionsButtonActionListener(ActionListener l) {
        selectButton.addActionListener(l);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new CardLayout(0, 0));
        rootPanel.setMinimumSize(new Dimension(300, 400));
        openCriteriaPanel = new JPanel();
        openCriteriaPanel.setLayout(new BorderLayout(0, 10));
        rootPanel.add(openCriteriaPanel, "CriteriaCard");
        openCriteriaPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20), null));
        final JLabel label1 = new JLabel();
        label1.setFont(new Font("Dialog", Font.BOLD, 14));
        label1.setText("Open a criteria");
        openCriteriaPanel.add(label1, BorderLayout.NORTH);
        final JTextArea textArea1 = new JTextArea();
        textArea1.setEditable(false);
        textArea1.setFont(new Font("Dialog", textArea1.getFont().getStyle(), textArea1.getFont().getSize()));
        textArea1.setLineWrap(true);
        textArea1.setOpaque(false);
        textArea1.setText("A criteria is a special file prepared by a grading coordinator that contains the expected parts of a student submission and how to grade them. A criteria may be a criteria file (a plain text file with the .scf extension) or a criteria package (a ZIP archive with the .scp extension). Criteria packages contain one criteria file, but also contain other files that may be required for automated grading.\n\nWithout a criteria, you cannot use Socrates to grade submissions. If you do not have a criteria, contact the grading coordinator for your course.");
        textArea1.setWrapStyleWord(true);
        openCriteriaPanel.add(textArea1, BorderLayout.CENTER);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new FlowLayout(FlowLayout.RIGHT, 5, 5));
        openCriteriaPanel.add(panel1, BorderLayout.SOUTH);
        quitButton = new JButton();
        quitButton.setText("Quit");
        panel1.add(quitButton);
        openButton = new JButton();
        openButton.setText("Open Criteria...");
        panel1.add(openButton);
        selectSubmissionsPanel = new JPanel();
        selectSubmissionsPanel.setLayout(new BorderLayout(0, 10));
        rootPanel.add(selectSubmissionsPanel, "SubmissionsCard");
        selectSubmissionsPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20), null));
        final JLabel label2 = new JLabel();
        label2.setFont(new Font("Dialog", Font.BOLD, 14));
        label2.setText("Select student submissions");
        selectSubmissionsPanel.add(label2, BorderLayout.NORTH);
        final JTextArea textArea2 = new JTextArea();
        textArea2.setEditable(false);
        textArea2.setFont(new Font("Dialog", textArea2.getFont().getStyle(), textArea2.getFont().getSize()));
        textArea2.setLineWrap(true);
        textArea2.setOpaque(false);
        textArea2.setText("Now select the student submissions you would like to grade. You must select at least one submission. Socrates will refuse to open a submission if it already contains a grade file, to ensure that the existing grade file is not overwritten.\n\nEach submission you select must be a folder containing the files submitted by one student. If you were sent a compressed archive (for example, a ZIP file) containing the submissions, decompress the archive before continuing.\n\nIf you are using receipts, make sure each receipt is stored alongside its receipted file.");
        textArea2.setWrapStyleWord(true);
        selectSubmissionsPanel.add(textArea2, BorderLayout.CENTER);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new FlowLayout(FlowLayout.RIGHT, 5, 5));
        selectSubmissionsPanel.add(panel2, BorderLayout.SOUTH);
        selectButton = new JButton();
        selectButton.setLabel("Select Submissions...");
        selectButton.setText("Select Submissions...");
        panel2.add(selectButton);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }
}
